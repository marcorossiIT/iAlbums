<template>
  <div class="page" data-name="home">
    <!-- Title and Add Button -->
    <div class="navbar">
      <div class="navbar-inner">
        <div class="title">iAlbums</div>
        <div class="right">
          <a href="/details/new/" class="link">
            <i class="icon f7-icons if-not-md">plus</i>
            <i class="icon material-icons if-md">add</i>
          </a>
        </div>
      </div>
    </div>

    <div class="page-content">
      <!-- Search Bar -->
      <div class="block">
        <div class="searchbar">
          <input type="search" placeholder="🔍 Search albums..." id="searchBar" />
        </div>
      </div>

      <!-- Sorting Options -->
      <div class="block">
        <div class="list simple-list">
          <select id="sortSelect">
            <option value="title">Sort by Title</option>
            <option value="author">Sort by Author</option>
            <option value="year">Sort by Year</option>
            <option value="rating">Sort by Rating</option>
          </select>
        </div>
      </div>

      <!-- Album List -->
      <div class="list media-list">
        <ul id="albumList"></ul>
      </div>
    </div>
  </div>
</template>

<script>
  export default function (props, { $f7, $onMounted, $onBeforeUnmount, $onUpdated, $update, $store }) {

    let albums = [];
    let searchQuery = '';
    let sortCriterion = 'title';
    let listIndex;

    const fetchAlbums = async () => {
      await $store.dispatch('getRemote');

      const storeAlbums = Object.entries($store.getters.albums.value || {}).map(([key, album]) => ({
        ...album,
        id: key,
        authors: album.authors || ['Unknown Author'], // sostituisce con un generico unknown
      }));
      albums = storeAlbums;

      applySortingAndFiltering();
    };

    const applySortingAndFiltering = () => {
      const query = searchQuery.toLowerCase();
      const sorted = [...albums].sort((a, b) => {
        if (sortCriterion === 'title') return a.title.localeCompare(b.title);
        if (sortCriterion === 'author') return a.authors[0].localeCompare(b.authors[0]);
        if (sortCriterion === 'year') return a.year - b.year;
        if (sortCriterion === 'rating') return a.rating.localeCompare(b.rating);
      });

      const filtered = sorted.filter((album) =>
        Object.values(album).some((value) =>
          value && value.toString().toLowerCase().includes(query))
      );

      renderAlbums(filtered);
    };

    const renderAlbums = (filteredAlbums) => {
      const albumList = document.getElementById('albumList');
      albumList.innerHTML = ''; // Clear existing list items

      filteredAlbums.forEach((album) => {
        const listItem = document.createElement('li');
        listItem.innerHTML = `
  <a href="/details/${album.id}/" class="item-link item-content">
    <div class="item-inner">
      <div class="item-title-row">
        <div class="item-title">${album.title}</div>
        <div class="item-after">${album.rating}</div>
      </div>
      <div class="item-subtitle">
        ${album.authors.join(', ')}
      </div>
    </div>
  </a>
`;

        albumList.appendChild(listItem);
      });
      // Initialize the list index (if needed)
      const listIndexEl = document.querySelector('.list-index');
      if (listIndexEl) {
        if (listIndex) listIndex.destroy();
        listIndex = $f7.listIndex.create({
          el: listIndexEl,
          listEl: albumList,
          indexes: Array.from(new Set(filteredAlbums.map((a) => a.title[0].toUpperCase()))),
          scrollList: true,
          label: true,
        });
      }

    };

    const onSearch = (event) => {
      searchQuery = event.target.value;
      applySortingAndFiltering();
    };

    const setSort = (criterion) => {
      sortCriterion = criterion;
      applySortingAndFiltering();
    };

    $onMounted(() => {
      const searchBar = document.getElementById('searchBar');
      const sortSelect = document.getElementById('sortSelect');

      searchBar.addEventListener('input', onSearch);
      sortSelect.addEventListener('change', (event) => setSort(event.target.value));
      // Setup pageInit listener
      $f7.on('pageInit', (page) => {
        if (page.name === 'home') {
          console.log('Home page initialized');
        }
      });

      fetchAlbums();
    });

    $onBeforeUnmount(() => {
      const searchBar = document.getElementById('searchBar');
      const sortSelect = document.getElementById('sortSelect');

      searchBar.removeEventListener('input', onSearch);
      sortSelect.removeEventListener('change', setSort);

      if (listIndex) listIndex.destroy();
      $f7.off('pageInit');
    });

    return $render;
  }
</script>

<style>
  .searchbar {
    margin-bottom: 10px;
  }

  .searchbar input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 50px;
  }

  .list.simple-list select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }

  .item-subtitle {
    max-width: 150px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
</style>