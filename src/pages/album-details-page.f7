<template>
  <div class="page" data-name="album-details">
    <!-- Top Navbar -->
    <div class="navbar navbar-large">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon icon-back"></i>
          </a>
        </div>
        <div class="title sliding">Album Details</div>
        <div class="right">
          <button id="save-album-button" class="button button-small hidden">Save</button>
        </div>
      </div>
    </div>

    <div class="page-content">
      <div class="block">
        <div class="list form-store-data">
          <ul>
            <!-- Album Title -->
            <li>
              <div class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Title</div>
                  <div class="item-input-wrap">
                    <input type="text" name="album-title" placeholder="Enter Album Title" />
                  </div>
                </div>
              </div>
            </li>

            <!-- Album Rating -->
            <li>
              <div class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Rating</div>
                  <div class="item-input-wrap">
                    <input type="text" name="album-rating" list="rating-options"
                      placeholder="Enter or choose a rating" />
                    <datalist id="rating-options">
                      <!-- Dynamically populated -->
                    </datalist>
                  </div>
                </div>
              </div>
            </li>

            <!-- Album Author -->
            <li>
              <div class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Author</div>
                  <div class="item-input-wrap">
                    <input type="text" name="album-author" placeholder="Enter Author Name" />
                  </div>
                </div>
              </div>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  export default function (props, { $store, $onMounted, $f7 }) {
    let hasUnsavedChanges = false;

    // We’ll keep references to the input elements:
    let inputTitle, inputRating, inputAuthor;

    // Identify if we’re creating a new album or editing existing
    const isNewRecord = props.albumID === 'new';

    const loadAlbumDetails = () => {
      const ratings = $store.getters.ratings.value;

      // Populate rating <datalist>
      const ratingOptions = document.getElementById('rating-options');
      ratingOptions.innerHTML = '';
      ratings.forEach((rating) => {
        const option = document.createElement('option');
        option.value = rating;
        ratingOptions.appendChild(option);
      });

      inputTitle = document.querySelector('input[name="album-title"]');
      inputRating = document.querySelector('input[name="album-rating"]');
      inputAuthor = document.querySelector('input[name="album-author"]');

      if (isNewRecord) {
        // Clear fields for a new album
        inputTitle.value = '';
        inputRating.value = '';
        inputAuthor.value = '';
      } else {
        // Existing album: load data from the store
        const album = $store.getters.albums.value.find((a) => a.id === props.albumID);
        if (album) {
          inputTitle.value = album.title;
          inputRating.value = album.rating;
          const author = $store.getters.authors.value.find(a => a.id === album.authors[0]);
          inputAuthor.value = author ? author.name : '';
        }
      }
    };

    const onFieldChange = () => {
      if (!hasUnsavedChanges) {
        hasUnsavedChanges = true;
        document.getElementById('save-album-button').classList.remove('hidden');
      }
    };

    const generateUniqueID = () => {
      return 'album_' + Date.now();
    };

    const generateAuthorID = (authorName) => {
      const newID = `author_${Date.now()}`;
      $store.dispatch('addAuthor', { id: newID, name: authorName });
      return newID;
    };

    const saveAlbumDetails = () => {
      const titleVal = inputTitle.value.trim();
      const ratingVal = inputRating.value.trim();
      const authorVal = inputAuthor.value.trim();

      // If the author doesn’t exist, create a new one:
      let authorObj = $store.getters.authors.value.find(a => a.name === authorVal);
      let authorID = authorObj ? authorObj.id : generateAuthorID(authorVal);

      if (isNewRecord) {
        // Create a new album object
        const newAlbum = {
          id: generateUniqueID(),
          title: titleVal,
          rating: ratingVal || 'meh',
          authors: [authorID],
        };
        $store.dispatch('addAlbum', newAlbum);

        $f7.toast.create({ text: 'New album added!', closeTimeout: 2000 }).open();
      } else {
        // Update existing album
        const updatedAlbum = {
          id: props.albumID,
          title: titleVal,
          rating: ratingVal,
          authors: [authorID],
        };
        $store.dispatch('updateAlbum', updatedAlbum);

        $f7.toast.create({ text: 'Album details saved!', closeTimeout: 2000 }).open();
      }

      hasUnsavedChanges = false;
      document.getElementById('save-album-button').classList.add('hidden');
    };

    $onMounted(() => {
      loadAlbumDetails();

      inputTitle = document.querySelector('input[name="album-title"]');
      inputRating = document.querySelector('input[name="album-rating"]');
      inputAuthor = document.querySelector('input[name="album-author"]');

      // Listen for changes
      inputTitle.addEventListener('input', onFieldChange);
      inputRating.addEventListener('input', onFieldChange);
      inputAuthor.addEventListener('input', onFieldChange);

      // Save button click
      document.getElementById('save-album-button').addEventListener('click', saveAlbumDetails);
    });

    return $render;
  }
</script>