<template>
  <div class="page" data-name="album-details">
    <!-- Top Navbar -->
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon icon-back"></i>
          </a>
        </div>
        <div class="title sliding" id="page-title">Album Details</div>
        <div class="right">
          <button id="save-album-button" class="button button-small hidden">Save</button>
        </div>
      </div>
    </div>

    <div class="page-content">
      <div class="block">
        <div class="list form-store-data">
          <ul>
            <!-- Album Title -->
            <li>
              <div class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Title</div>
                  <div class="item-input-wrap">
                    <input type="text" name="album-title" placeholder="Enter Album Title" />
                  </div>
                </div>
              </div>
            </li>

            <!-- Album Rating -->
            <li>
              <div class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Rating</div>
                  <div class="item-input-wrap">
                    <input type="text" name="album-rating" list="rating-options"
                      placeholder="Enter or choose a rating" />
                    <datalist id="rating-options"></datalist>
                  </div>
                </div>
              </div>
            </li>

            <!-- Album Author -->
            <li>
              <div class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Author(s)</div>
                  <div class="item-input-wrap">
                    <input type="text" name="album-author" placeholder="Enter Author Names (comma-separated)" />
                  </div>
                </div>
              </div>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  export default function (_, { $store, $f7, $onMounted, $onBeforeUnmount }) {
    let inputTitle, inputRating, inputAuthor;
    let albumID = null;
    let isNewRecord = false;
    let hasUnsavedChanges = false;

    const loadAlbumDetails = () => {
      document.getElementById('page-title').textContent = isNewRecord ? 'New Album' : 'Edit Album';

      const ratingOptions = document.getElementById('rating-options');
      ratingOptions.innerHTML = '';

      // Populate ratings dynamically from store
      const ratings = [...new Set(Object.values($store.getters.albums.value).map(album => album.rating || ''))];
      ratings.sort().forEach((rating) => {
        const option = document.createElement('option');
        option.value = rating;
        ratingOptions.appendChild(option);
      });

      // Get input references
      inputTitle = document.querySelector('input[name="album-title"]');
      inputRating = document.querySelector('input[name="album-rating"]');
      inputAuthor = document.querySelector('input[name="album-author"]');

      if (isNewRecord) {
        inputTitle.value = '';
        inputRating.value = '';
        inputAuthor.value = '';
      } else {
        const album = $store.getters.albums.value[albumID];
        if (album) {
          inputTitle.value = album.title || '';
          inputRating.value = album.rating || '';
          inputAuthor.value = (album.authors || []).join(', ');
        } else {
          $f7.toast.create({ text: 'Album not found!', closeTimeout: 2000 }).open();
        }
      }
    };

    const onFieldChange = () => {
      if (!hasUnsavedChanges) {
        hasUnsavedChanges = true;
        document.getElementById('save-album-button').classList.remove('hidden');
      }
    };

    const saveAlbumDetails = () => {
      const title = inputTitle.value.trim();
      const rating = inputRating.value.trim();
      const authors = inputAuthor.value.split(',').map(author => author.trim()).filter(Boolean);

      if (!title) {
        $f7.dialog.alert('Album title is required!');
        return;
      }

      const albumData = { title, rating, authors };

      if (isNewRecord) {
        $store.dispatch('addAlbum', albumData);
        $f7.toast.create({ text: 'Album added successfully!', closeTimeout: 2000 }).open();
      } else {
        $store.dispatch('updateAlbum', { id: albumID, ...albumData });
        $f7.toast.create({ text: 'Album updated successfully!', closeTimeout: 2000 }).open();
      }

      hasUnsavedChanges = false;
      document.getElementById('save-album-button').classList.add('hidden');
    };

    $onMounted(() => {
      // Extract albumID from route parameters
      const route = $f7.views.current.router.currentRoute;
      albumID = route.params.albumID;
      isNewRecord = albumID === 'new';

      loadAlbumDetails();

      inputTitle.addEventListener('input', onFieldChange);
      inputRating.addEventListener('input', onFieldChange);
      inputAuthor.addEventListener('input', onFieldChange);

      document.getElementById('save-album-button').addEventListener('click', saveAlbumDetails);
    });

    $onBeforeUnmount(() => {
      inputTitle.removeEventListener('input', onFieldChange);
      inputRating.removeEventListener('input', onFieldChange);
      inputAuthor.removeEventListener('input', onFieldChange);
    });

    return $render;
  }
</script>